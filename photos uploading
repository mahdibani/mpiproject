package com.example.mpiproject;

import android.app.Activity;
import android.content.ClipData;
import android.content.ContentResolver;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.webkit.MimeTypeMap;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class AddTechActivity extends AppCompatActivity {
    private static final int IMAGE_PICKER_REQUEST_CODE0 = 3;
    private static final int IMAGE_PICKER_REQUEST_CODE1 = 2;
    private static final int IMAGE_PICKER_REQUEST_CODE2 = 3;
    private StorageReference mStorageRef;
    StorageReference storageRef = FirebaseStorage.getInstance().getReference();
    StorageReference imageRef;
    int itemCount=0;
    ImageView imageView;
    private Bitmap selectedImageBitmap;
    int successfulUploads = 0;
    Map<String, Object> map = new HashMap<>();
    private List<String> imageUriList = new ArrayList<>();;
    ClipData clipData;

    private TextInputEditText DeviceNameEdt,DevicePriceEdt,DeviceImageEdt,DeviceDescriptionEdt;
    private MaterialButton addTechDevice;
    private ProgressBar LoadingPB;
    private FirebaseDatabase firebaseDatabase;
    private DatabaseReference databaseReference;
    private String deviceID;


    private ImageView galleryImageView;
    DeviceRVModal deviceRVModal;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_tech);
        DeviceNameEdt = findViewById(R.id.idEdtDeviceName);
        DevicePriceEdt = findViewById(R.id.idEdtDevicePrice);
        DeviceImageEdt = findViewById(R.id.idEdtDeviceImageLink);
        DeviceDescriptionEdt = findViewById(R.id.idEdtDeviceDescription);
        mStorageRef= FirebaseStorage.getInstance().getReference("uplouadsimages/");
        galleryImageView = findViewById(R.id.img_selected);
        Button btnimg=findViewById(R.id.selectimagesButton0);
        btnimg.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
                intent.setType("image/*");
                intent.setAction(Intent.ACTION_GET_CONTENT);
                intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
                startActivityForResult(intent, IMAGE_PICKER_REQUEST_CODE0);
            }
        });


        addTechDevice = findViewById(R.id.idBtnAddDevice);
        LoadingPB = findViewById(R.id.idPBLoading);
        firebaseDatabase = FirebaseDatabase.getInstance();
        databaseReference = firebaseDatabase.getReference("devices");


    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == IMAGE_PICKER_REQUEST_CODE0 && resultCode == Activity.RESULT_OK) {
            if (data != null ) {
                if (data.getClipData()!=null) {
                    //ArrayList<Uri> imageUriList = new ArrayList<>();
                    clipData = data.getClipData();
                    itemCount = clipData.getItemCount();
                    storageRef = FirebaseStorage.getInstance().getReference();
                    FirebaseAuth mAuth = FirebaseAuth.getInstance();
                    upLouadImageAndFirestore(storageRef);
                }
                else if(data.getData()!=null) {
                    ArrayList<Uri> imageUriList = new ArrayList<>();
                    storageRef = FirebaseStorage.getInstance().getReference();
                    Uri imageUri = data.getData();
                    imageRef = storageRef.child("images/" + "img" + System.currentTimeMillis() + "." + "jpg");
                    UploadTask uploadTask = imageRef.putFile(imageUri);
                    uploadTask.addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                        @Override
                        public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                            // Handle successful upload, like getting the download URL
                            imageRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
                                @Override
                                public void onSuccess(Uri downloadUrl) {
                                    // Store this URL in Firestore along with other data
                                    // Assuming you have a reference to the Firestore instance and a "technology" collection
                                    imageUriList.add(downloadUrl);
                                    addTechDevice.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            LoadingPB.setVisibility(View.VISIBLE);
                                            String devicename = DeviceNameEdt.getText().toString();
                                            String deviceprice = DevicePriceEdt.getText().toString();
                                            String deviceimage = DeviceImageEdt.getText().toString();
                                            String devicedescription = DeviceDescriptionEdt.getText().toString();
                                            deviceID = devicename;
                                            map.put("imageURL",imageUriList);
                                            String technology=getIntent().getStringExtra("technology");
                                            FirebaseFirestore.getInstance().collection(technology).add(map);
                                            DeviceRVModal deviceRVModal = new DeviceRVModal(devicename,deviceprice,deviceimage,devicedescription,deviceID,imageUriList);
                                            FirebaseFirestore.getInstance().collection(technology)
                                                    .add(map)
                                                    .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
                                                        @Override
                                                        public void onSuccess(DocumentReference documentReference) {
                                                            // Document added successfully
                                                        }
                                                    })
                                                    .addOnFailureListener(new OnFailureListener() {
                                                        @Override
                                                        public void onFailure(@NonNull Exception e) {
                                                            // Error adding document
                                                        }
                                                    });



                                            databaseReference.addValueEventListener(new ValueEventListener() {
                                                @Override
                                                public void onDataChange(@NonNull DataSnapshot snapshot) {
                                                    LoadingPB.setVisibility(View.GONE);
                                                    databaseReference.child(deviceID).setValue(deviceRVModal);
                                                    Toast.makeText(AddTechActivity.this,"a Device has been added",Toast.LENGTH_SHORT).show();
                                                    startActivity(new Intent(AddTechActivity.this, TechActivity.class));

                                                }

                                                @Override
                                                public void onCancelled(@NonNull DatabaseError error) {
                                                    Toast.makeText(AddTechActivity.this,"error is"+error.toString(),Toast.LENGTH_SHORT).show();
                                                }
                                            });

                                        }
                                    });

                                }
                            });
                        };
                    });
                }
            }
        }
    }
    private String getFileExtension(Uri uri){
        ContentResolver cR =getContentResolver();
        MimeTypeMap mime= MimeTypeMap.getSingleton();
        return mime.getExtensionFromMimeType(cR.getType(uri));
    }
    private void upLouadImageAndFirestore(StorageReference storageRef) {
        imageRef = storageRef.child("images/" + "img" + System.currentTimeMillis() + "." + "jpg");
        UploadTask uploadTask = imageRef.putFile(clipData.getItemAt(0).getUri());
        uploadTask.addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
            @Override
            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                imageRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
                    @Override
                    public void onSuccess(Uri downloadUrl) {
                        imageUriList.add(downloadUrl.toString());

                        // Continue with the next image (image 2)
                        StorageReference imageRef = storageRef.child("images/" + "img" + System.currentTimeMillis() + "." + "jpg");
                        UploadTask uploadTask = imageRef.putFile(clipData.getItemAt(1).getUri());
                        uploadTask.addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                            @Override
                            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                                imageRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
                                    @Override
                                    public void onSuccess(Uri downloadUrl) {
                                        imageUriList.add(downloadUrl.toString());

                                        // Continue with the last image (image 3)
                                        StorageReference imageRef = storageRef.child("images/" + "img" + System.currentTimeMillis() + "." + "jpg");
                                        UploadTask uploadTask = imageRef.putFile(clipData.getItemAt(2).getUri());
                                        uploadTask.addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                                            @Override
                                            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                                                imageRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
                                                    @Override
                                                    public void onSuccess(Uri downloadUrl) {
                                                        imageUriList.add(downloadUrl.toString());
                                                        // At this point, all images are uploaded and their URLs are added to the list
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });

    }
}
